name: CI/CD Pipeline for EKS

on:
  push:
    branches:
      - main   # Change if you deploy from another branch

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Run Unit Tests (example for Node.js)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install dependencies & run tests
        run: |
          npm install
          npm test

      # 3. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1   # change region

      # 4. Login to Amazon ECR
      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      # 5. Build, Tag & Push Docker Image
      - name: Build and Push Docker image
        run: |
          IMAGE_TAG=${GITHUB_SHA}   # use commit SHA for unique tag
          ECR_REGISTRY=${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY=my-web-app
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      # 6. Update Kubeconfig for EKS
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region us-east-1 --name my-eks-cluster

      # 7. Deploy to EKS
      - name: Deploy to EKS
        run: |
          kubectl set image deployment/web-deployment web=${{ env.IMAGE }}
          kubectl rollout status deployment/web-deployment
